{
  "openapi": "3.0.0",
  "servers": [
    {
      "description": "AWS US East",
      "url": "https://queue.keboola.com"
    },
    {
      "description": "AWS EU Central",
      "url": "https://queue.eu-central-1.keboola.com"
    },
    {
      "description": "Azure North Europe",
      "url": "https://queue.north-europe.azure.keboola.keboola.com"
    },
    {
      "description": "Azure Testing",
      "url": "https://queue.east-us-2.azure.keboola-testing.com"
    },
    {
      "description": "SwaggerHub API Auto Mocking",
      "url": "https://virtserver.swaggerhub.com/keboola/job-queue-api/1.2.1"
    }
  ],
  "info": {
    "description": "API for running component jobs",
    "version": "1.2.4",
    "title": "Job Queue API",
    "contact": {
      "email": "devel@keboola.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/jobs": {
      "get": {
        "summary": "List jobs",
        "description": "List jobs and filter them by various criteria.\n",
        "tags": ["Jobs"],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "Search jobs by *id*. You can set multiple values.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "oneId": {
                "summary": "Single id",
                "value": ["123"]
              },
              "multipleIds": {
                "summary": "Multiple ids",
                "value": ["123", "456", "789"]
              }
            }
          },
          {
            "in": "query",
            "name": "runId",
            "description": "Search jobs by *runId*. You can set multiple values.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "oneId": {
                "summary": "Single runId",
                "value": ["123"]
              },
              "multipleIds": {
                "summary": "Multiple runIds",
                "value": ["123", "456", "789"]
              }
            }
          },
          {
            "in": "query",
            "name": "branchId",
            "description": "Search jobs by *branchId*. You can set multiple values.\n\nSet **branchId[]=null** to get just jobs belonging to the **main** branch.\n",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "mainBranch": {
                "summary": "Jobs ran on the main branch",
                "value": ["null"]
              },
              "oneId": {
                "summary": "Jobs ran on a branch",
                "value": ["123"]
              },
              "multipleIds": {
                "summary": "Jobs ran on multiple branches",
                "value": ["123", "456", "789"]
              }
            }
          },
          {
            "in": "query",
            "name": "tokenId",
            "description": "Search jobs by *tokenId*. You can set multiple values.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "oneId": {
                "summary": "Single tokenId",
                "value": ["123"]
              },
              "multipleIds": {
                "summary": "Multiple tokenIds",
                "value": ["123", "456", "789"]
              }
            }
          },
          {
            "in": "query",
            "name": "tokenDescription",
            "description": "Search jobs by *tokenDescription*. You can set multiple values.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "oneId": {
                "summary": "Single tokenDescription",
                "value": ["My token"]
              },
              "multipleIds": {
                "summary": "Multiple tokenDescriptions",
                "value": ["My token", "Your token", "Omni token"]
              }
            }
          },
          {
            "in": "query",
            "name": "component",
            "description": "Search jobs by *component id*. You can set multiple values.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "oneId": {
                "summary": "Single component",
                "value": ["keboola.ex-db-snowflake"]
              },
              "multipleIds": {
                "summary": "Multiple components",
                "value": ["keboola.ex-google-drive", "keboola.wr-db-snowflake"]
              }
            }
          },
          {
            "in": "query",
            "name": "config",
            "description": "Search jobs by *configuration id*. You can set multiple values.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "oneId": {
                "summary": "Single configuration",
                "value": ["123"]
              },
              "multipleIds": {
                "summary": "Multiple configurations",
                "value": ["123", "456", "789"]
              }
            }
          },
          {
            "in": "query",
            "name": "configRowIds",
            "description": "Search jobs by *configuration row id*. Each job can have multiple configRowIds or none. You can search for multiple values and all jobs containing at least one of the specified configRowIds will be returned in that case.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "oneId": {
                "summary": "Single configRowId",
                "value": ["123"]
              },
              "multipleIds": {
                "summary": "Multiple configRowIds",
                "value": ["123", "456", "789"]
              }
            }
          },
          {
            "in": "query",
            "name": "mode",
            "description": "Filter jobs by *mode*. You can use either *run* or *debug* values.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["run", "debug"]
              }
            },
            "examples": {
              "oneId": {
                "summary": "Single mode",
                "value": ["run"]
              },
              "multipleIds": {
                "summary": "Multiple modes",
                "value": ["run", "debug"]
              }
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Search jobs by *status*. You can set multiple values.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "created",
                  "waiting",
                  "processing",
                  "terminating",
                  "success",
                  "error",
                  "terminated",
                  "cancelled"
                ]
              }
            },
            "examples": {
              "oneId": {
                "summary": "Jobs with a status",
                "value": ["created"]
              },
              "multipleIds": {
                "summary": "Jobs with either of statuses",
                "value": ["waiting", "processing", "terminated"]
              }
            }
          },
          {
            "in": "query",
            "name": "createdTimeFrom",
            "description": "Jobs that were created after *createdTimeFrom*. [Supported date and time formats](https://www.php.net/manual/en/datetime.formats.php)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "examples": {
              "lastWeek": {
                "summary": "Jobs created in the last week",
                "value": "-1 week"
              },
              "last8Hours": {
                "summary": "Jobs created in last 8 hours",
                "value": "-8 hours"
              },
              "exactDate": {
                "summary": "Jobs created after 2021-01-01",
                "value": "2021-01-01"
              }
            }
          },
          {
            "in": "query",
            "name": "createdTimeTo",
            "description": "Jobs that were created before *createdTimeTo*. [Supported date and time formats](https://www.php.net/manual/en/datetime.formats.php)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "examples": {
              "lastWeek": {
                "summary": "Jobs created before today",
                "value": "today"
              },
              "last8Hours": {
                "summary": "Jobs created before last monday",
                "value": "last monday"
              },
              "exactDate": {
                "summary": "Jobs created before 2021-01-01",
                "value": "2021-01-01"
              }
            }
          },
          {
            "in": "query",
            "name": "startTimeFrom",
            "description": "Jobs that started after *startTimeFrom*. [Supported date and time formats](https://www.php.net/manual/en/datetime.formats.php)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "examples": {
              "lastWeek": {
                "summary": "Jobs started in the last week",
                "value": "-1 week"
              },
              "last8Hours": {
                "summary": "Jobs started in last 8 hours",
                "value": "-8 hours"
              },
              "exactDate": {
                "summary": "Jobs started after 2021-01-01",
                "value": "2021-01-01"
              }
            }
          },
          {
            "in": "query",
            "name": "startTimeTo",
            "description": "Jobs that started before *startTimeTo*. [Supported date and time formats](https://www.php.net/manual/en/datetime.formats.php)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "examples": {
              "lastWeek": {
                "summary": "Jobs started before today",
                "value": "today"
              },
              "last8Hours": {
                "summary": "Jobs started before last monday",
                "value": "last monday"
              },
              "exactDate": {
                "summary": "Jobs started before 2021-01-01",
                "value": "2021-01-01"
              }
            }
          },
          {
            "in": "query",
            "name": "endTimeFrom",
            "description": "Jobs that ended after *endTimeFrom*. [Supported date and time formats](https://www.php.net/manual/en/datetime.formats.php)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "examples": {
              "lastWeek": {
                "summary": "Jobs ended in the last week",
                "value": "-1 week"
              },
              "last8Hours": {
                "summary": "Jobs ended in last 8 hours",
                "value": "-8 hours"
              },
              "exactDate": {
                "summary": "Jobs ended after 2021-01-01",
                "value": "2021-01-01"
              }
            }
          },
          {
            "in": "query",
            "name": "endTimeTo",
            "description": "Jobs that ended before *endTimeTo*. [Supported date and time formats](https://www.php.net/manual/en/datetime.formats.php)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "examples": {
              "lastWeek": {
                "summary": "Jobs ended before today",
                "value": "today"
              },
              "last8Hours": {
                "summary": "Jobs ended before last monday",
                "value": "last monday"
              },
              "exactDate": {
                "summary": "Jobs ended before 2021-01-01",
                "value": "2021-01-01"
              }
            }
          },
          {
            "in": "query",
            "name": "durationSecondsFrom",
            "description": "Jobs that were running for *durationSecondsFrom* seconds or more.",
            "required": false,
            "schema": {
              "type": "number"
            },
            "examples": {
              "moreThanHour": {
                "summary": "More than 1 hour",
                "value": 3600
              }
            }
          },
          {
            "in": "query",
            "name": "durationSecondsTo",
            "description": "Jobs that were running less than *durationSecondsTo* seconds.",
            "required": false,
            "schema": {
              "type": "number"
            },
            "examples": {
              "lessThanDay": {
                "summary": "Less than a day",
                "value": 86400
              }
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Page offset",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            },
            "example": 50
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum limit of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100
            },
            "example": 1000
          },
          {
            "in": "query",
            "name": "sortBy",
            "description": "Sort the jobs by specified attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "runId",
                "branchId",
                "projectId",
                "projectName",
                "tokenId",
                "tokenDescription",
                "componentId",
                "configId",
                "configRowIds",
                "tag",
                "mode",
                "status",
                "startTimeFrom",
                "startTimeTo",
                "createdTimeFrom",
                "createdTimeTo",
                "endTimeFrom",
                "endTimeTo",
                "durationSeconds",
                "result"
              ],
              "default": "id"
            },
            "example": "runId"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Order of the sorting. Default is *desc*, newest jobs are displayed at the top.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            },
            "example": "asc"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a job",
        "operationId": "createJob",
        "tags": ["Jobs"],
        "description": "Create a new Job\n",
        "parameters": [
          {
            "in": "header",
            "name": "X-KBC-RunId",
            "schema": {
              "type": "string",
              "example": 1234567890
            },
            "description": "Run ID of parent job (see the runId job property)"
          }
        ],
        "requestBody": {
          "description": "## Basic Job\nUse \"run\" **mode** to create a new job of a component specified by **component** with configuration defined either by **config** and optionally **configRow** or provide the whole configuration for the component in the **configData** attribute. Use \"forceRun\" **mode** to create a new job of a disabled configuration.\n\n## Job of specific component image tag\nSpecify the component image tag in the **tag** attribute.\n\n## Debug job\nThis API call has the same body attributes as the Run call, except the **mode** attribute is set to \"debug\" (default is \"run\"). It creates a job that prepares the data folder including the serialized configuration files. Then it compresses the data folder and uploads it to your project's Files in Storage. This way you will get a snapshot of what the data folder looked like before the component started. If processors are used, a snapshot of the data folder is created before each processor. After the entire component finishes, another snapshot is made.\nFor example, if you run component a with processor b and c in the after section, you will receive:\n- stage_0 file with contents of the data folder before component a was run\n- stage_1 file with contents of the data folder before processor b was run\n- stage_2 file with contents of the data folder before processor c was run\n- stage_output file with contents of the data folder before output mapping was about to be performed (after c finished).\n\nIf configuration rows are used, then the above is repeated for each configuration row. If the job finishes with and error, only the stages before the error are uploaded.\n\nThis API call does not upload any tables or files to Storage. I.e. when the component finishes, its output is discarded and the output mapping to storage is **not performed**. This makes this API call generally very safe to call, because it cannot break the KBC project in any way. However keep in mind, that if the component has any outside side effects, these will get executed. This applies typically to writers which will write the data into the external system even with this debug API call.\n\nNote that the snapshot archive will contain all files in the data folder including any temporary files produced be the component. The snapshot will not contain the output state.json file. This is because the snapshot is made before a component is run where the out state of the previous component is not available any more. Also note that all encrypted values are removed from the configuration file and there is no way to retrieve them. It is also advisable to run this command with limited input mapping so that you don't end up with gigabyte size archives.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["component"],
                "properties": {
                  "component": {
                    "type": "string"
                  },
                  "mode": {
                    "type": "string",
                    "enum": ["run", "debug", "forceRun"],
                    "default": "run"
                  },
                  "config": {
                    "type": "string"
                  },
                  "configRowIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "configData": {
                    "type": "object"
                  },
                  "tag": {
                    "type": "string"
                  },
                  "branchId": {
                    "type": "string"
                  },
                  "variableValuesId": {
                    "type": "string"
                  },
                  "variableValuesData": {
                    "type": "object",
                    "required": ["values"],
                    "properties": {
                      "values": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": ["name", "value"],
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Job with configRows": {
                  "value": {
                    "component": "keboola.ex-db-snowflake",
                    "mode": "run",
                    "config": "123456789",
                    "configRowIds": ["12345", "67890"]
                  }
                },
                "Job with configData": {
                  "value": {
                    "component": "keboola.ex-db-snowflake",
                    "mode": "run",
                    "configData": {
                      "parameters": {
                        "foo": "bar",
                        "baz": "mek"
                      }
                    }
                  }
                },
                "Job with image tag": {
                  "value": {
                    "component": "keboola.ex-db-snowflake",
                    "mode": "run",
                    "config": "123456789",
                    "tag": "1.2.3"
                  }
                },
                "Job in debug mode": {
                  "value": {
                    "component": "keboola.ex-db-snowflake",
                    "mode": "debug",
                    "config": "123456789"
                  }
                },
                "Job in dev branch": {
                  "value": {
                    "component": "keboola.ex-db-snowflake",
                    "mode": "debug",
                    "config": "123456789",
                    "branchId": "456789"
                  }
                },
                "Job with pre-defined variable Values": {
                  "value": {
                    "component": "keboola.ex-db-snowflake",
                    "mode": "debug",
                    "config": "123456789",
                    "variableValuesId": "456789"
                  }
                },
                "Job with inline variable values": {
                  "value": {
                    "component": "keboola.ex-db-snowflake",
                    "mode": "debug",
                    "config": "123456789",
                    "variableValuesData": {
                      "values": [
                        {
                          "name": "someVariable",
                          "value": "someValue"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "summary": "Get job detail",
        "operationId": "getJob",
        "tags": ["Jobs"],
        "description": "Get details of specified job\n",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{jobId}/kill": {
      "post": {
        "summary": "Set job for termination",
        "operationId": "killJob",
        "tags": ["Jobs"],
        "description": "Sets the job desiredStatus to **terminating**. The daemon will pick such a job and depending on its current status, it will either cancell it, if the job was still in the **created** or **waiting** state, or if the job already entered **processing** state, it will be **terminated**.\n",
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "description": "Job ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/configurations-jobs": {
      "get": {
        "summary": "List most recent jobs of configurations",
        "operationId": "listConfigurationsJobs",
        "description": "List most recent jobs of configurations\n",
        "tags": ["Configurations Jobs"],
        "parameters": [
          {
            "in": "query",
            "name": "componentId",
            "description": "Search jobs of *componentId*.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "keboola.orchestrator"
          },
          {
            "in": "query",
            "name": "configId[]",
            "description": "Configuration ID",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "example": "my.config"
          },
          {
            "in": "query",
            "name": "jobsPerConfiguration",
            "description": "Number of jobs of each configuration to list",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "description": "Attribute to sort results by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "configId",
                "configRowId",
                "projectId",
                "componentId",
                "status",
                "desiredStatus",
                "mode",
                "startTime",
                "createdTime",
                "endTime"
              ]
            },
            "example": "startTime"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Order of the sorting, must be used with the \"sortBy\" parameter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "asc"
            },
            "example": "asc"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Paging offset",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 123
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Results per page",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "in": "query",
            "name": "branchId",
            "description": "Search jobs by *branchId*.\n\nSet **branchId=null** to get just jobs belonging to the **main** branch.\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "examples": {
              "mainBranch": {
                "summary": "Jobs ran on the main branch",
                "value": "null"
              },
              "oneId": {
                "summary": "Jobs ran on a branch",
                "value": "123"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stats/project": {
      "get": {
        "summary": "Get jobs statistics",
        "operationId": "getProjectStats",
        "description": "Get jobs statistics\n",
        "tags": ["Project Jobs Stats"],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStats"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-StorageApi-Token"
      }
    },
    "schemas": {
      "Job": {
        "type": "object",
        "required": [
          "id",
          "runId",
          "project",
          "token",
          "status",
          "desiredStatus",
          "mode",
          "component",
          "config",
          "configData",
          "configRow",
          "tag",
          "createdTime",
          "startTime",
          "endTime",
          "durationSeconds",
          "result",
          "usageData",
          "isFinished",
          "url",
          "metrics"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "123456789"
          },
          "runId": {
            "type": "string",
            "example": "123456790.123456789",
            "description": "Run ID is same as Job ID, unless the job is a child job. A child\njob is created by providing the parent Run ID in the X-KBC-RunId\nparameter. The runId of a child job contains the parent runId and\nthe child job ID separated by dot. The nesting depth is not limited.\n"
          },
          "branchId": {
            "type": "string",
            "example": "123456789",
            "description": "Jobs from the main branch will have branchId = null\n"
          },
          "project": {
            "type": "object",
            "required": ["id"],
            "properties": {
              "id": {
                "type": "string",
                "example": 123
              }
            }
          },
          "token": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": 12345
              },
              "token": {
                "type": "string",
                "example": "KBC::ProjectSecure::eJwBXwG...md8="
              }
            }
          },
          "status": {
            "type": "string",
            "enum": ["created", "waiting", "processing", "success", "error", "terminating", "terminated", "cancelled"]
          },
          "desiredStatus": {
            "type": "string",
            "enum": ["processing", "terminating"]
          },
          "component": {
            "type": "string",
            "example": "keboola.ex-db-snowflake"
          },
          "mode": {
            "type": "string",
            "enum": ["run", "debug"]
          },
          "tag": {
            "type": "string",
            "example": "1.2.3"
          },
          "config": {
            "type": "string",
            "example": "123456789"
          },
          "configRow": {
            "type": "string",
            "example": "123456789"
          },
          "configData": {
            "type": "object",
            "example": {
              "parameters": {
                "foo": "bar",
                "baz": "mek"
              }
            }
          },
          "result": {
            "type": "object",
            "properties": {
              "images": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "digests": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                }
              },
              "configVersion": {
                "type": "integer"
              },
              "message": {
                "type": "string"
              }
            }
          },
          "createdTime": {
            "type": "string",
            "format": "date-time",
            "example": "2019-06-21T09:12:33.001Z"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2019-06-21T09:12:33.001Z"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2019-06-21T09:12:33.001Z"
          },
          "durationSeconds": {
            "type": "integer",
            "example": 165
          },
          "isFinished": {
            "type": "boolean",
            "example": false
          },
          "url": {
            "type": "string",
            "example": "https://queue.east-us-2.azure.keboola-testing.com/jobs/123456789"
          },
          "variableValuesId": {
            "type": "string",
            "example": "1234"
          },
          "variableValuesData": {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "example": {
              "items": [
                {
                  "name": "testVariable",
                  "value": "testValue"
                }
              ]
            }
          },
          "backend": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              }
            },
            "example": {
              "type": "custom"
            }
          },
          "metrics": {
            "type": "object",
            "properties": {
              "storage": {
                "type": "object",
                "properties": {
                  "inputTablesBytesSum": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "ProjectStats": {
        "type": "object",
        "properties": {
          "jobs": {
            "type": "object",
            "properties": {
              "durationSum": {
                "type": "integer",
                "example": 3600,
                "description": "Total duration sum of all processed jobs. (in seconds)"
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["error", "code", "status"],
        "properties": {
          "error": {
            "type": "string",
            "example": "The value foobar is invalid"
          },
          "code": {
            "type": "integer",
            "example": 400
          },
          "status": {
            "type": "string",
            "enum": ["error"]
          },
          "exceptionId": {
            "type": "string",
            "example": "job-runner-1234567890"
          }
        }
      }
    }
  }
}
