{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Notification service API",
    "version" : "1.0.0",
    "contact" : {
      "email" : "devel@keboola.com"
    },
    "license" : {
      "name" : "MIT",
      "url" : "https://opensource.org/licenses/MIT"
    }
  },
  "servers" : [ {
    "description" : "AWS US East",
    "url" : "https://notification.keboola.com"
  }, {
    "description" : "AWS EU Central",
    "url" : "https://notification.eu-central-1.keboola.com"
  }, {
    "description" : "Azure North Europe",
    "url" : "https://notification.eu-central-1.keboola.com"
  }, {
    "description" : "Azure Testing",
    "url" : "https://notification.east-us-2.azure.keboola-testing.com"
  }, {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/odinuv/notifications-service/1.0.0"
  } ],
  "paths" : {
    "/events/{eventName}" : {
      "post" : {
        "summary" : "Notify the service about an event",
        "operationId" : "postEvent",
        "tags" : [ "Events" ],
        "description" : "Notify service about an event. The event is stored in the service and processes asynchronously later.\n",
        "security" : [ {
          "ApplicationTokenAuth" : [ ]
        } ],
        "parameters" : [ {
          "in" : "path",
          "name" : "eventName",
          "schema" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "required" : true,
          "description" : "Name of the event"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              },
              "examples" : {
                "jobFailed" : {
                  "$ref" : "#/components/examples/Event_JobFailed"
                }
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Event accepted for processing"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/project-subscriptions" : {
      "post" : {
        "summary" : "Create a new project-level notification subscription",
        "operationId" : "createSubscription",
        "tags" : [ "Project Subscriptions" ],
        "description" : "Subscribe a recipient for notifictions on given event type.\n\nBy default, a notification is sent to all occurences of the event. You can set `filters` which are then matched\nagainst event data to subscribe to more specific situations.\n",
        "security" : [ {
          "StorageApiTokenAuth" : [ ]
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewProjectSubscription"
              },
              "examples" : {
                "Job Failed" : {
                  "$ref" : "#/components/examples/Subscription_JobFailed"
                },
                "Job Succeeded With Warning" : {
                  "$ref" : "#/components/examples/Subscription_JobSucceededWithWarning"
                },
                "Job Processing Long" : {
                  "$ref" : "#/components/examples/Subscription_JobProcessingLong"
                },
                "Phase Job Failed" : {
                  "$ref" : "#/components/examples/Subscription_PhaseJobFailed"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Subscription created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectSubscription"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          }
        }
      },
      "get" : {
        "summary" : "List existing project-level subscriptions",
        "operationId" : "listSubscriptions",
        "tags" : [ "Project Subscriptions" ],
        "description" : "List all existing subscriptions for the project (project is resolved from the request authorization token).\n",
        "security" : [ {
          "StorageApiTokenAuth" : [ ]
        } ],
        "parameters" : [ {
          "in" : "query",
          "name" : "event",
          "schema" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "description" : "Name of the event"
        } ],
        "responses" : {
          "200" : {
            "description" : "Subscriptions list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ProjectSubscription"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/project-subscriptions/{subscriptionId}" : {
      "get" : {
        "summary" : "Get subscription details",
        "operationId" : "getSubscription",
        "tags" : [ "Project Subscriptions" ],
        "description" : "Get subscription details.\n",
        "security" : [ {
          "StorageApiTokenAuth" : [ ]
        } ],
        "parameters" : [ {
          "in" : "path",
          "name" : "subscriptionId",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "ID of the subscription"
        } ],
        "responses" : {
          "204" : {
            "description" : "Subscription deleted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProjectSubscription"
                }
              }
            }
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "description" : "Subscription does not exist for the current project."
          }
        }
      },
      "delete" : {
        "summary" : "Delete existing subscription",
        "operationId" : "deleteSubscription",
        "tags" : [ "Project Subscriptions" ],
        "description" : "Delete existing subscription.\n",
        "security" : [ {
          "StorageApiTokenAuth" : [ ]
        } ],
        "parameters" : [ {
          "in" : "path",
          "name" : "subscriptionId",
          "required" : true,
          "schema" : {
            "type" : "integer"
          },
          "description" : "ID of the subscription"
        } ],
        "responses" : {
          "204" : {
            "description" : "Subscription deleted."
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "description" : "Subscription does not exist for the current project."
          }
        }
      }
    }
  },
  "components" : {
    "securitySchemes" : {
      "StorageApiTokenAuth" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "X-StorageApi-Token"
      },
      "ApplicationTokenAuth" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "X-Kbc-ManageApiToken"
      }
    },
    "responses" : {
      "BadRequest" : {
        "description" : "Invalid input data",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized" : {
        "description" : "Unauthorized request",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas" : {
      "NumericString" : {
        "type" : "string",
        "pattern" : "^\\d+$",
        "example" : "1234"
      },
      "EventName" : {
        "type" : "string",
        "minLength" : 1,
        "example" : "job-failed"
      },
      "NewProjectSubscription" : {
        "type" : "object",
        "required" : [ "event", "projectId", "recipient" ],
        "properties" : {
          "event" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "projectId" : {
            "type" : "string",
            "example" : "1234"
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "field" : {
                  "type" : "string",
                  "minLength" : 1
                },
                "value" : {
                  "oneOf" : [ {
                    "type" : "string"
                  }, {
                    "type" : "integer"
                  }, {
                    "type" : "boolean"
                  } ]
                }
              }
            }
          },
          "recipient" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/RecipientChannel_Email"
            } ],
            "discriminator" : {
              "propertyName" : "channel"
            }
          }
        }
      },
      "ProjectSubscription" : {
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "id" : {
              "$ref" : "#/components/schemas/NumericString"
            }
          }
        }, {
          "$ref" : "#/components/schemas/NewProjectSubscription"
        } ]
      },
      "RecipientChannel_Email" : {
        "type" : "object",
        "required" : [ "channel" ],
        "properties" : {
          "channel" : {
            "type" : "string",
            "enum" : [ "email" ]
          },
          "address" : {
            "type" : "string",
            "format" : "email"
          }
        }
      },
      "Error" : {
        "type" : "object",
        "required" : [ "error", "code", "status" ],
        "properties" : {
          "error" : {
            "type" : "string",
            "example" : "The value foobar is invalid"
          },
          "code" : {
            "type" : "integer",
            "example" : 400
          },
          "status" : {
            "type" : "string",
            "enum" : [ "error" ]
          },
          "exceptionId" : {
            "type" : "string",
            "example" : "job-runner-1234567890"
          }
        }
      }
    },
    "examples" : {
      "Event_JobFailed" : {
        "value" : {
          "project" : {
            "id" : "1234",
            "name" : "My Project"
          },
          "job" : {
            "id" : "1234",
            "url" : "https://keboola.com/job",
            "startTime" : "2021-07-08T15:00:00Z",
            "endTime" : "2021-07-08T16:00:00Z",
            "component" : {
              "id" : "my.component",
              "name" : "Component name"
            },
            "configuration" : {
              "id" : "1234",
              "name" : "Configuration name"
            },
            "tasks" : [ {
              "status" : "error",
              "component" : {
                "id" : "my.component",
                "url" : "https://keboola.com/component"
              },
              "startTime" : "2021-07-08T15:00:00Z",
              "endTime" : "2021-07-08T16:00:00Z",
              "resultMessage" : "All done"
            } ]
          }
        }
      },
      "Subscription_JobFailed" : {
        "value" : {
          "event" : "job-failed",
          "filters" : [ {
            "field" : "job.component.id",
            "value" : "my.component"
          }, {
            "field" : "job.configuration.id",
            "value" : "12345"
          } ],
          "recipient" : {
            "channel" : "email",
            "address" : "user@example.com"
          }
        }
      },
      "Subscription_JobSucceededWithWarning" : {
        "value" : {
          "event" : "job-succeeded-with-warning",
          "filters" : [ {
            "field" : "job.component.id",
            "value" : "my.component"
          }, {
            "field" : "job.configuration.id",
            "value" : "12345"
          } ],
          "recipient" : {
            "channel" : "email",
            "address" : "user@example.com"
          }
        }
      },
      "Subscription_JobProcessingLong" : {
        "value" : {
          "event" : "job-processing-long",
          "filters" : [ {
            "field" : "job.component.id",
            "value" : "my.component"
          }, {
            "field" : "job.configuration.id",
            "value" : "12345"
          }, {
            "field" : "durationOvertimePercentage",
            "operator" : ">=",
            "value" : 0.75
          } ],
          "recipient" : {
            "channel" : "email",
            "address" : "user@example.com"
          }
        }
      },
      "Subscription_PhaseJobFailed" : {
        "value" : {
          "event" : "job-failed",
          "filters" : [ {
            "field" : "job.component.id",
            "value" : "my.component"
          }, {
            "field" : "job.configuration.id",
            "value" : "12345"
          }, {
            "field" : "phase.id",
            "value" : "1234"
          } ],
          "recipient" : {
            "channel" : "email",
            "address" : "user@example.com"
          }
        }
      }
    }
  }
}